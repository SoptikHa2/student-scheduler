Bridge.assembly("StudentScheduler",function(){"use strict";Bridge.define("StudentScheduler.App",{main:function(){var butNewTeacher,butNewStudent;StudentScheduler.App.plan=new StudentScheduler.AppLogic.Plan;butNewTeacher=StudentScheduler.App.Gid("add-teacher");butNewTeacher.onclick=Bridge.fn.combine(butNewTeacher.onclick,function(){StudentScheduler.App.AddNewTeacher(butNewTeacher)});butNewStudent=StudentScheduler.App.Gid("add-student");butNewStudent.onclick=Bridge.fn.combine(butNewStudent.onclick,function(){StudentScheduler.App.AddNewStudent(butNewStudent)})},statics:{fields:{plan:null,lastSetWasTeacher:!1,lastSetId:0},methods:{AddNewTeacher:function(sender){var input=Bridge.as(System.Linq.Enumerable.from(sender.parentElement.parentElement.getElementsByClassName("form-group")[0].children).where(function(x){return Bridge.referenceEquals(x.id,"teacher-name")}).first(),HTMLInputElement),newTeacherName=input.value,div,card,setHours;Bridge.referenceEquals(newTeacherName,"")||(StudentScheduler.App.plan.teachers.add(new StudentScheduler.AppLogic.User(newTeacherName,System.Array.init(5,!1,System.Boolean),System.Array.init(5,0,System.Int32),System.Array.init(5,0,System.Int32))),div=StudentScheduler.App.Gid("teachers"),card=document.createElement("div"),card.className="card card-body",card.innerHTML=(card.innerHTML||"")+("<p><strong>"+(newTeacherName||"")+"<\/strong><\/p>"||""),setHours=document.createElement("button"),setHours.name=(StudentScheduler.App.plan.teachers.Count-1|0).toString(),setHours.className="btn btn-primary teacher-click",setHours.setAttribute("data-toggle","modal"),setHours.setAttribute("data-target","#setHoursTeacherModal"),setHours.innerHTML="Nastavit hodiny",card.appendChild(setHours),div.appendChild(card),input.value="")},AddNewStudent:function(sender){var input=Bridge.as(System.Linq.Enumerable.from(sender.parentElement.parentElement.getElementsByClassName("form-group")[0].children).where(function(x){return Bridge.referenceEquals(x.id,"student-name")}).first(),HTMLInputElement),newStudentName=input.value,div,card,setHours;Bridge.referenceEquals(newStudentName,"")||(StudentScheduler.App.plan.students.add(new StudentScheduler.AppLogic.User(newStudentName,System.Array.init(5,!1,System.Boolean),System.Array.init(5,0,System.Int32),System.Array.init(5,0,System.Int32))),div=StudentScheduler.App.Gid("students"),card=document.createElement("div"),card.className="card card-body",card.innerHTML=(card.innerHTML||"")+("<p><strong>"+(newStudentName||"")+"<\/strong><\/p>"||""),setHours=document.createElement("button"),setHours.name=(StudentScheduler.App.plan.teachers.Count-1|0).toString(),setHours.className="btn btn-primary teacher-click",setHours.setAttribute("data-toggle","modal"),setHours.setAttribute("data-target","#setHoursStudentModal"),setHours.innerHTML="Nastavit hodiny",card.appendChild(setHours),div.appendChild(card),input.value="")},TeacherEditHoursClick:function(){},StudentEditHoursClick:function(){},Gid:function(id){return document.getElementById(id)},Gcl:function(cls){return System.Linq.Enumerable.from(document.getElementsByClassName(cls)).toArray()}}}});Bridge.define("StudentScheduler.AppLogic.Plan",{fields:{students:null,teachers:null},ctors:{ctor:function(){this.$initialize();this.students=new(System.Collections.Generic.List$1(StudentScheduler.AppLogic.User).ctor);this.teachers=new(System.Collections.Generic.List$1(StudentScheduler.AppLogic.User).ctor)}},methods:{Calc:function(){throw new System.NotImplementedException;}}});Bridge.define("StudentScheduler.AppLogic.User",{statics:{fields:{hourLength:0},ctors:{init:function(){this.hourLength=45}}},fields:{name:null,daysAvailable:null,minutesFromAvailable:null,minutesToAvailable:null,availableMinutes:null,assignedConvertedMinutesFrom:0},ctors:{ctor:function(name,daysAvailable,minutesFromAvailable,minutesToAvailable){var i,c,m,currentminute;for(this.$initialize(),this.name=name,this.daysAvailable=daysAvailable,this.minutesFromAvailable=minutesFromAvailable,this.minutesToAvailable=minutesToAvailable,this.assignedConvertedMinutesFrom=0,this.availableMinutes=System.Array.init(1440,!1,System.Boolean),i=0;i<5;i=i+1|0)if(daysAvailable[System.Array.index(i,daysAvailable)])for(c=0,m=0;m<1440;m=m+5|0)currentminute=Bridge.Int.mul(Bridge.Int.mul(i,24),60),minutesFromAvailable[System.Array.index(i,minutesFromAvailable)]<=currentminute&&minutesToAvailable[System.Array.index(i,minutesToAvailable)]>=(currentminute+StudentScheduler.AppLogic.User.hourLength|0)&&(this.availableMinutes[System.Array.index(c,this.availableMinutes)]=!0),c=c+1|0}}})});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICJTdHVkZW50U2NoZWR1bGVyLm1pbi5qcyIsCiAgInNvdXJjZVJvb3QiOiAiIiwKICAic291cmNlcyI6IFtdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICIiLAogICJzb3VyY2VzQ29udGVudCI6IFtdCn0K
